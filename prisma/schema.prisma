// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  passwordString String?
  storages       Storage[]
  locations      Location[]

  isSuperUser Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Storage {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  contentDisposition String?
  downloadUrl        String?
  pathname           String?
  url                String
  contentType        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location[]
}

model Location {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  imageId           String? @db.ObjectId @default("66371be1b174e47a7ca28dc1")
  formatted_address String
  description       String
  lat               Float
  lng               Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  image Storage? @relation(fields: [imageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StayTunned {
    id                String @id @default(auto()) @map("_id") @db.ObjectId
    email         String         @unique
    message       String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model ContactSupport {
    id                String @id @default(auto()) @map("_id") @db.ObjectId
    email         String         @unique
    message       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
